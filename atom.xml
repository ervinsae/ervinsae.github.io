<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ervin</title>
  
  <subtitle>真正的强者是认清了生活的本质，并且去热爱他的人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2024-11-25T06:54:50.040Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ervin Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Thinking like a farmer</title>
    <link href="http://yoursite.com/2024/11/25/Thinking%20like%20a%20farmer/"/>
    <id>http://yoursite.com/2024/11/25/Thinking like a farmer/</id>
    <published>2024-11-25T06:43:35.866Z</published>
    <updated>2024-11-25T06:54:50.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在twitter上看到的这个理论，简单了解了下“像农民一样思考”：农民不会对着庄稼大吼大叫，不会播种第二天就希望庄稼已经长好了，更不会在没长好之前将庄稼连根拔起。但是，我们在日常生活可能中经常做出类似上面的这种事情。那么这种思考方式到底有什么好处呢，我问了下AI（Grok-beta），下面是它的总结，个人觉得很有道理记录一下。</p><h2 id="内涵"><a href="#内涵" class="headerlink" title="内涵"></a>内涵</h2><p>“Thinking like a farmer”是一种比喻，旨在描述一种长期规划、耐心、以及对自然和环境的尊重与合作的思维方式。以下是这个理论的一些核心观点和解释：</p><ol><li>长期视角<br>种植和收获：农民在播种时知道收获需要时间，种子不会立刻变成可收割的作物。同样，思考和决策时，我们需要考虑长期的结果，而不是只看眼前的利益。短期的投资或行动可能会在未来带来更大的回报。</li><li>尊重自然规律<br>季节和周期：农民必须遵循自然的季节和周期，知道何时播种，何时收获。这教导我们尊重自然和市场的周期，懂得在正确的时间做正确的事情。</li><li>资源管理<br>土壤、水和养分：农民知道如何管理土地的养分，保持土壤的健康，不仅是为了当前的收成，更是为了未来的可持续性。这提醒我们要合理利用资源，确保它们能持续使用。</li><li>适应和创新<br>气候变化和市场波动：农民不得不适应气候变化和市场的波动，他们会不断学习和尝试新的种植方法或作物。这鼓励我们要有适应性思维，面对变化要有创新精神。</li><li>耐心与坚持<br>等待收获：农民在播种后需要等待，期间可能会遇到各种困难，但他们坚持下去直到收获。这反映了在追求目标时需要耐心和坚持不懈的精神。</li><li>合作与社区<br>互助合作：农业社区往往通过合作和互助来解决问题，共享资源和知识。这表明在个人或团队的努力中，合作和共同体的力量是不可忽视的。</li><li>风险管理<br>天气和市场风险：农民面临天气变化和市场价格波动的风险，他们通过多样化种植、保险等方式来管理风险。这告诉我们要在决策中考虑到可能的风险，并有相应的应对策略。</li><li>回馈自然<br>循环经济：好的农民会回馈自然，通过有机种植、轮作等方法来维持土壤的健康和生态的平衡，强调了可持续发展的重要性。<br>应用：</li></ol><p>在商业中，“像农民一样思考”意味着考虑公司的长期增长和可持续性，而不是只追求短期利润。它鼓励企业家和领导者制定长期计划，关注品牌的声誉、员工的福利、环境的保护和社区的关系。<br>在个人生活中，这可能意味着对个人目标有长期的规划，耐心地培养技能和关系，尊重自然和社会的规律，采取可持续的生活方式。</p><p>总之，“thinking like a farmer”强调的是一种对未来负责任的态度，注重可持续性、耐心、适应性和合作的价值观。这是一种与自然和社会和谐共处的智慧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在twitter上看到的这个理论，简单了解了下“像农民一样思考”：农民不会对着庄稼大吼大叫，不会播种第二天就希望庄稼已经长好了，更不会在没长
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="文章" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>对抗内耗</title>
    <link href="http://yoursite.com/2024/11/06/2024-11-06/"/>
    <id>http://yoursite.com/2024/11/06/2024-11-06/</id>
    <published>2024-11-06T03:04:03.351Z</published>
    <updated>2024-11-25T06:54:47.689Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.locimg.com/2024/11/06/d9be193b0d9cb.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s1.locimg.com/2024/11/06/d9be193b0d9cb.jpeg&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="文章" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>伪勤奋</title>
    <link href="http://yoursite.com/2024/11/01/%E4%BC%AA%E5%8B%A4%E5%A5%8B/"/>
    <id>http://yoursite.com/2024/11/01/伪勤奋/</id>
    <published>2024-10-31T16:00:00.000Z</published>
    <updated>2024-11-01T07:06:44.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自推文</p></blockquote><p><strong>伪勤奋</strong>的四个表现</p><ol><li>花大量时间做事情中最容易的环节，还到处炫耀“没有功劳有苦劳”</li><li>以“准备”的名义拖延，看上去很忙但是事情没有任何进展</li><li>从来不验证工作成果，不知道做得好还是做得坏，只顾闷头拉车，不会抬头看天</li><li>读了很多书，但从不总结规律，即使总结了规律，也没有用到自己的实践中去。</li></ol><p>只有剔除大量低价值的肤浅工作，给生活创造积极的变化，才能走出内耗的怪圈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转自推文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;伪勤奋&lt;/strong&gt;的四个表现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;花大量时间做事情中最容易的环节，还到处炫耀“没有功劳有苦劳”&lt;/li&gt;
&lt;li&gt;以“准备”的名义拖延，看上去很忙但是事
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>常见认知偏差</title>
    <link href="http://yoursite.com/2024/10/11/%E5%B8%B8%E8%A7%81%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/"/>
    <id>http://yoursite.com/2024/10/11/常见认知偏差/</id>
    <published>2024-10-10T16:00:00.000Z</published>
    <updated>2024-10-11T08:50:54.992Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.locimg.com/2024/10/11/7a21d4ab07d5b.webp" alt="认知偏差"></p><blockquote><p>origin: <a href="https://www.bbshare.site/resource/498" target="_blank" rel="noopener">BBSHARE</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s1.locimg.com/2024/10/11/7a21d4ab07d5b.webp&quot; alt=&quot;认知偏差&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;origin: &lt;a href=&quot;https://www.bbshare.site/
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>sing-box订阅</title>
    <link href="http://yoursite.com/2024/03/19/Sing-Box%E8%AE%A2%E9%98%85/"/>
    <id>http://yoursite.com/2024/03/19/Sing-Box订阅/</id>
    <published>2024-03-18T16:00:00.000Z</published>
    <updated>2024-03-19T03:19:36.918Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用ClaudFlare Vless薅了一波<a href="https://github.com/jwfst5088/cmliu-edgetunnel" target="_blank" rel="noopener">羊毛</a>，作为备用节点感觉完全足够了（ClaudFlare真的是个宝藏）。然后使用Mac上的Clash去订阅发现它不支持Vless协议，iOS上小火箭是支持的但是QX又不支持，然后偶然间X上看到了一个博主在说sing-box，印象中好像在它testfligth时就开始下载了，但是一直不知道怎么用，然后就看了下推文，发现它是个GFW工具，然后它也支持订阅，只是需要转换，这里记载下转换的方式。</p><a id="more"></a><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>打开 Replit 项目：<a href="https://replit.com/@misaka-blog/sing-box-subscribe" target="_blank" rel="noopener">https://replit.com/@misaka-blog/sing-box-subscribe</a> ，然后点击“Fork”按钮，克隆成自己的项目<br><img src="https://telegraph-image-brt.pages.dev/file/66fb9dbc1e30d6dc2857c.png" alt></p><p>找到这个文件：providers.json，将 “url” 后面的值改成自己的机场 / 自建节点订阅链接地址<br><img src="https://telegraph-image-brt.pages.dev/file/353173476fb204b5dc951.png" alt></p><p>然后点击绿色的“Run”按钮，待配置好项目依赖之后，选择配置模板（Singbox 1.8.0 及以上请输入 1，以下版本输入3），我是1.8.9版本，所以输入1<br><img src="https://telegraph-image-brt.pages.dev/file/5f119f0dc9815df5d3180.png" alt></p><p>待一切无误后，可以在左侧的文件列表看到 config.json 文件，即可代表完成生成</p><p><img src="https://telegraph-image-brt.pages.dev/file/45c257052888ca40ae279.png" alt></p><p>之后，将config.json文件导入到sing-box中，路径：Profies - New Profile - type选择local，file选择import，然后导入Create。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用ClaudFlare Vless薅了一波&lt;a href=&quot;https://github.com/jwfst5088/cmliu-edgetunnel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;羊毛&lt;/a&gt;，作为备用节点感觉完全足够了（ClaudFlare真的是个宝藏）。然后使用Mac上的Clash去订阅发现它不支持Vless协议，iOS上小火箭是支持的但是QX又不支持，然后偶然间X上看到了一个博主在说sing-box，印象中好像在它testfligth时就开始下载了，但是一直不知道怎么用，然后就看了下推文，发现它是个GFW工具，然后它也支持订阅，只是需要转换，这里记载下转换的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="GFW" scheme="http://yoursite.com/tags/GFW/"/>
    
  </entry>
  
  <entry>
    <title>随想（二）</title>
    <link href="http://yoursite.com/2024/03/14/%E9%9A%8F%E6%83%B3%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2024/03/14/随想（2）/</id>
    <published>2024-03-13T16:00:00.000Z</published>
    <updated>2024-10-11T08:41:47.205Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了一些书《芯片战争》、《枪炮，钢铁，病菌》，看了一些许知远做的《十三邀》采访的一些人物采访，基于这些记录我的一些思考。都是一些点状的，可能是思维认知的一次缓慢升级过程，重要的不是它是什么，而是我产生了这些思考并记录下来，希望后面的自己能从这些点状的思考中获取一些能量把它织成一张网。</p><ul><li>在这个特定时代，大部分成功的人（商业）都在高喊着理想主义，伟大愿景；做的其实都是现实主义，鼠目寸光的事情（逻辑思维）。理想和现实不能说是背道而驰，起码不是同一个方向，也就是想的说的和做的不同。往往，诗和远方在现实面前会被击的粉碎。</li><li>大家为什么而活着？什么是对的？</li><li>一个成功的商人一定不是理想主义者，就算原来是一个理想主义者，在残酷的商业竞争下也会变成一个极度的现实主义者。</li><li>过去，信息很匮乏，知识是分散的，有知识的人获取知识的效率是远高于没有知识的，大家都固化在自己的知识阶级中；现在，信息极度爆炸，信息量多到大家没精力去去伪存真。所有的信息扑面而来，大家能做的是只接受自己愿意接收的，信息茧房形成了。你看，知识流动过低和过快导致的结果好像是一致的。我们现在追求的极致效率，在带给我们方便的同时其实也深深的伤害了我们。</li><li>过去四十年快速发展给我们造成了速度和效率一日千里是常态的假象，其实看过人类历史的发展停滞和缓慢才是主旋律。</li><li>站在知识付费厂商角度：我们做的事情是在推动知识平权，让更多的人更容易获取知识，提高整个社会的认知水平，最好能达成一种高认知的社会共识（什么是对的，什么是错的）；站在消费者角度：我买了这个知识，这个知识就是我的，至于我有没有看，有没有吸收不重要，重要的是我参与了知识的传递(我是他们中的一员)；站在第三方角度：贩卖焦虑，过度包装，说是让社会达成共识，其实什么都达不成。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看了一些书《芯片战争》、《枪炮，钢铁，病菌》，看了一些许知远做的《十三邀》采访的一些人物采访，基于这些记录我的一些思考。都是一些点状的，可能是思维认知的一次缓慢升级过程，重要的不是它是什么，而是我产生了这些思考并记录下来，希望后面的自己能从这些点状的思考中获取一些能量把
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>AI Agents</title>
    <link href="http://yoursite.com/2023/11/27/AI%20Agents/"/>
    <id>http://yoursite.com/2023/11/27/AI Agents/</id>
    <published>2023-11-27T03:11:34.911Z</published>
    <updated>2023-11-27T03:40:09.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>很久没有更新blog了，自从3月份OpenAI推出了GPT3.5以来，AI圈子爆红了一段时间，大家讨论了很多关于AI的话题，随着时间流逝，讨论的热度也逐渐消退，似乎OpenAI只是激起了一点水花而已。但是，在AI圈子的人，特别是长期关注AI发展的人（2023-3月以前）据我观察其实是更活跃了，这期间也出过了很多很多技术，各个大厂层出不穷的推出了自己的LLM。作为一个被隔绝的旁观者，我只能尽量去体验一些我能体验的模型，然后关注下Twitter中AI大佬发布的最新动态。在此过程中，我看了两篇文章，这里做一下总结和心得。</p><h2 id="关于这两篇文章"><a href="#关于这两篇文章" class="headerlink" title="关于这两篇文章"></a>关于这两篇文章</h2><p>在此之前，我自己申请了Azure Open Ai，里面创建了几个模型，然后使用cloudflare把API暴露出来，使用Opencat或者其它AI工具客户端设置代理就可以用了；当然Open AI的web端还有Poe都是可以用的。另外，我还尝试使用Python用Long Chain工具和Azure AI接口想把自己的Blog向量化，做一个自己的私有知识库，但是一直卡在token太多这个问题里面，然后工作事情较多就一直耽搁了。。。（还是想抽时间把这个实现了）。</p><p>回到主题，我看了两篇文章一个是7月份发布的来自Lilian Weng的个人Bolg，就是讲AI Agents的，文章是<a href="https://www.aixinzhijie.com/article/6824818" target="_blank" rel="noopener">软件2.0雏形初现，OpenAI的下一步</a>，感觉这篇文章中的观点非常受启发，所以打算记录一下；另一篇是Twitter中宝玉大佬转发的杨立昆教授在《AI:Grappling with a New Kind of Intelligence》中的发言类容（这里不给链接了）。</p><p>下面我会大量摘抄两篇文章中的内容，然后就一些点记录一下自己的观点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;很久没有更新blog了，自从3月份OpenAI推出了GPT3.5以来，AI圈子爆红了一段时间，大家讨论了很多关于AI的话题，随着时间流逝，讨
      
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>杂记(4)</title>
    <link href="http://yoursite.com/2023/09/20/%E6%9D%82%E8%AE%B0-4/"/>
    <id>http://yoursite.com/2023/09/20/杂记-4/</id>
    <published>2023-09-20T05:48:39.000Z</published>
    <updated>2023-09-20T05:54:04.506Z</updated>
    
    <content type="html"><![CDATA[<p>我对你好，不是因为我想你也能以相同的方式对待我，而是因为我觉得你值得被这样对待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我对你好，不是因为我想你也能以相同的方式对待我，而是因为我觉得你值得被这样对待。&lt;/p&gt;

      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>杂记（3）</title>
    <link href="http://yoursite.com/2023/05/11/%E6%9D%82%E8%AE%B0%EF%BC%883%EF%BC%89/"/>
    <id>http://yoursite.com/2023/05/11/杂记（3）/</id>
    <published>2023-05-10T16:00:00.000Z</published>
    <updated>2023-05-19T05:49:54.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何做一个“内核稳”的人"><a href="#如何做一个“内核稳”的人" class="headerlink" title="如何做一个“内核稳”的人"></a>如何做一个“内核稳”的人</h2><ol><li><p>不急着反应，别人肯定你，不欣喜若狂；别人批评你，不盲目自卑内耗。这都是别人的看法，和本来的你关系不大。</p></li><li><p>多内观自己的坏情绪。会因为什么事情焦虑、恐惧、内耗，把这些事情从头到尾梳理一遍，以第三者角度看待事情，就会理智很多。</p></li><li><p>提高自己的经济能力。这个重要，但不是最重要。所以如果自己的经济能力暂时不会有太大的改 善，先从心态开始练起。</p></li><li><p>不要有过多的解释欲。不是所有人都值得你解释，只对自己在乎的几个人说自己的事，必要的时候甚至可以不说。 </p></li><li><p>接受别人可以是任何样子。可以是聪明的，也可以是傻逼的。可以是漂亮的，也可以是丑陋的。可以是善良的，也可以是阴狠的。</p></li><li><p>存在即合理。世界上很多东西不符合自己的三观，但它必然有存在的理由，抱着平和的心态多去看世界，了解多样性，就能更有包容心。</p></li></ol><a id="more"></a><h2 id="辩证思考"><a href="#辩证思考" class="headerlink" title="辩证思考"></a>辩证思考</h2><p>什么叫爱？就是用对方需要的方式表达你的好，而不是用自认为好的方式强加于人。</p><p>什么叫沟通？就是用对方的语言讲述你的道理，而不是用自己的语言来讲述自己的道理。</p><p>什么叫辩论？就是用对方的逻辑证明你的观点，而不是用自己的逻辑证明自己的观点。</p><p>什么叫销售？就是让客户觉得他占了你的便宜，而不是把自认为便宜的东西卖给了客户。</p><p>什么叫好感？就是让别人觉得你在他眼中有多么优秀，而不是证明自己有多优秀。</p><p>什么叫理解？就是用对方的立场看待自己的观点，而不是站在自己的立场强调自我感受。</p><h2 id="底层逻辑的三个特点"><a href="#底层逻辑的三个特点" class="headerlink" title="底层逻辑的三个特点"></a>底层逻辑的三个特点</h2><ol><li><p>抽象性：抽象就是从众多的事物中提取出共同的、本质性的特征。比如人会对抽烟、喝酒、吸毒、玩游戏等各种事物上瘾，而上瘾的本质就是多巴胺欲望回路过强，导致人们无法控制自己的欲望。</p></li><li><p>驱动性：底层逻辑是各种事物呈现出当前现象的驱动力。比如水往低处流、汽车在下坡时关闭发动机还能继续滑行，这都是受到了重力的驱动。</p></li><li><p>通用性：底层逻辑针对的不是某个特定问题，而是某一类问题，有时甚至能被运用在万事万物上。比如在读书、写作、健身、财富积累等方面，我们要想大有收获，都必须坚持<strong>长期主义</strong>。</p></li></ol><h2 id="顶层思维"><a href="#顶层思维" class="headerlink" title="顶层思维"></a>顶层思维</h2><p>顶层思维是一种自上而下，由大到小的思维框架，类似计算机术语中的递归思维，和它相对的思维方式是随机思维（随机思维的最大问题是一叶障目，将自己锁死在低效率的小圈子中），自下而上一点点往上拱。</p><p>随机思维是每次的行动都是由外在的机缘触发的，而顶层思维是从事务的核心原理出发，用积极的姿态去寻找解决方案，将目标与现状链接，找到其中必然步骤，然后列出次序一一落实。</p><p>一个正确的理论模型（框架）是可以预测事物出现的。把现有事物填充到理论模型（框架）中不能证明这个理论牛逼，如果通过这个理论模型（框架）可以去发现未知事物那才牛逼。类似元素周期表的理论。（2023/5/19，这个例子好像不太合适，元素周期表本质上是真实世界的客观规律，但是理论模型实质是一种可以自洽的方法论并不是客观规律）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何做一个“内核稳”的人&quot;&gt;&lt;a href=&quot;#如何做一个“内核稳”的人&quot; class=&quot;headerlink&quot; title=&quot;如何做一个“内核稳”的人&quot;&gt;&lt;/a&gt;如何做一个“内核稳”的人&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不急着反应，别人肯定你，不欣喜若狂；别人批评你，不盲目自卑内耗。这都是别人的看法，和本来的你关系不大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多内观自己的坏情绪。会因为什么事情焦虑、恐惧、内耗，把这些事情从头到尾梳理一遍，以第三者角度看待事情，就会理智很多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提高自己的经济能力。这个重要，但不是最重要。所以如果自己的经济能力暂时不会有太大的改 善，先从心态开始练起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要有过多的解释欲。不是所有人都值得你解释，只对自己在乎的几个人说自己的事，必要的时候甚至可以不说。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接受别人可以是任何样子。可以是聪明的，也可以是傻逼的。可以是漂亮的，也可以是丑陋的。可以是善良的，也可以是阴狠的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存在即合理。世界上很多东西不符合自己的三观，但它必然有存在的理由，抱着平和的心态多去看世界，了解多样性，就能更有包容心。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>杂记（2）</title>
    <link href="http://yoursite.com/2023/03/20/2023-03-20/"/>
    <id>http://yoursite.com/2023/03/20/2023-03-20/</id>
    <published>2023-03-20T10:43:12.837Z</published>
    <updated>2023-04-01T03:53:37.460Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>思维其实是有维度的，点，线，面，体。</p></li><li><p>丛林法则，弱肉强食，雪豹捕猎羚羊，本质上他们都是为了活下去。</p></li><li><p>LLM最重要的三个元素，数据，算法，算力。其中算力和硬件（半导体）有关，也就是门槛。预计各大巨头公司都会发展自己的LLM，只是目前微软领先了一个身位。国内由于算力就被卡死，不能用最先进的H100，导致始终会比国外要慢一拍，所以可能的机会是换个赛道，基于有缺陷的模型深度构建应用层，丰富基于模型的生态，继续卷。所以，我预测是未来几年在国内做应用的会有一波新的机会。</p></li><li><p>类似chatGPT这类的大模型，参数达到了175B（1750亿）个，还有一些小型的模型（典型的是Anthropic, PBC开发的Claude，参数是170万），其实普通用户在使用上区分不出他们有什么区别。下面是我问他和chatGPT有什么区别，挺有意思的。</p></li></ul><p><img src="https://s1.locimg.com/2023/03/30/df761d3b8e272.jpg" alt="claude.jpg"></p><ul><li>目前能想到使用这类语言模型干得活有：翻译，查询，知识普及，文章创作或润色，codepilot等等（想象力匮乏），后续陆续如果加上图片，声音甚至是视频，那想象空间就无限大了，基本就实现了AIGC。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;思维其实是有维度的，点，线，面，体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;丛林法则，弱肉强食，雪豹捕猎羚羊，本质上他们都是为了活下去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LLM最重要的三个元素，数据，算法，算力。其中算力和硬件（半导体）有关，也就是门槛。预计
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>杂记</title>
    <link href="http://yoursite.com/2023/03/16/%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
    <id>http://yoursite.com/2023/03/16/一些感想/</id>
    <published>2023-03-15T16:00:00.000Z</published>
    <updated>2023-04-01T03:52:36.157Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一天中最幸运的事情：</li></ul><ol><li>碰到一首可以单曲循环的歌</li><li>解决了一个难题</li><li>突然冒出一个令自己兴奋的想法，想立马去实施</li><li>完成了一项让自己满意的工作</li><li>消除了和另一个在意的人之间的矛盾</li><li>1，2，3，4，5都来一遍</li><li>。。。</li></ol><ul><li><p>天下无不散的宴席。人生是一场旅途，有人同行是一种缘分，珍惜同行时光，等到分别之时，挥手告别，微笑离开。</p></li><li><p>成年人能够依赖的只有自己，能够救自己的也只有自己。</p></li><li><p>永远不要去试探人性，人性通常都禁不起推敲。</p></li><li><p>不作恶，保持善良。</p></li><li><p>不以物喜，不以己悲。平静对待赞赏，坦然接受批评。持续反思，保持好奇心，多琢磨，多折腾。</p></li><li><p>AI的可怕之处在于，他永远在反思，在对未知事物保持敬畏。他的回答已经很完美了，最后还会来一句他有局限性。相比而言，作为人类认知不及AI万分之一，还经常飘。人类和AI共存的日子马上就要来临了。</p></li><li><p>美好的东西，站在远处观赏就好。靠的太近也许是另一番景象。</p></li><li><p>剖析自己，找到自己的缺点，就算改不掉也要时刻提醒自己。</p></li><li><p>不要看他说什么，看他做什么，他做什么代表他相信什么。</p></li><li><p>每个人只相信自己相信的东西。</p></li><li><p>多元的信息输入源很重要，信息茧房的产生其实就是常年接受一种信息源，不断强化你的既有认知。特别是目前的社交网络，信息流很多都是同质化，信息量密度低的内容，接触多了之后会让你不愿意或者没有耐心去思考稍微复杂的问题，让人变得无知且固执。</p></li><li><p>顿悟是什么感觉？王阳明砍竹子和牛顿被苹果砸都让他们顿悟了，外界的扰动触发了内心认知的一次升级。</p></li><li><p>命运和人定胜天可能是人生的两个不同纬度，后天的努力通过因果关系可以改变命运。</p></li><li><p>出了问题，有时候向内去找答案比向外求助更有用。</p></li><li><p>越来越相信平行宇宙的理论。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;一天中最幸运的事情：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;碰到一首可以单曲循环的歌&lt;/li&gt;
&lt;li&gt;解决了一个难题&lt;/li&gt;
&lt;li&gt;突然冒出一个令自己兴奋的想法，想立马去实施&lt;/li&gt;
&lt;li&gt;完成了一项让自己满意的工作&lt;/li&gt;
&lt;li&gt;消除了和另一个
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>深度学习之环境搭建</title>
    <link href="http://yoursite.com/2023/03/10/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2023/03/10/深度学习之环境搭建/</id>
    <published>2023-03-09T16:00:00.000Z</published>
    <updated>2023-03-13T09:49:48.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>团队内部要做一些分享，最近ChatGPT正火，而且正好也在研究深度学习在移动设备上的相关东西，所以就想就深度学习这个方向去沉淀一些东西供参考。</p><p>深度学习目前是两大框架，神仙打架。Google的Tensorflow和Meta的Pytorch，本文基于Tensorflow来讲。由于本人使用的是Mac M1版本，在折腾过程中遇到了很多问题，最终还是解决了。这里做个记录。</p><a id="more"></a><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Mac自带了python环境，直接安装tensorflow后，运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import tensorflow as tf</span><br></pre></td></tr></table></figure></p><p>直接就报错了：illegal hardware instruction python3</p><p>后面发现是由于Tensorflow不支持Arm的cpu架构，需要使用Macos专用的Tensorflow框架，也询问了ChatGPT，最终过程是这样的。</p><ol><li><p>下载基于Arm架构的miniconda<br>下载地址：<a href="https://github.com/conda-forge/miniforge/#download" target="_blank" rel="noopener">https://github.com/conda-forge/miniforge/#download</a></p></li><li><p>输入下面三个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#下载完以后在terminal依次输入以下三个命令</span><br><span class="line"># 授权</span><br><span class="line">chmod +x ~/Downloads/Miniforge3-MacOSX-arm64.sh</span><br><span class="line"># 执行下载的脚本</span><br><span class="line">sh ~/Downloads/Miniforge3-MacOSX-arm64.sh</span><br><span class="line"># 运行脚本</span><br><span class="line">source ~/miniforge3/bin/activate</span><br></pre></td></tr></table></figure></li><li><p>下载conda环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></li><li><p>创建conda虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tf python==3.9</span><br><span class="line"></span><br><span class="line">conda activate tf</span><br></pre></td></tr></table></figure></li><li><p>安装tensorflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># pip下载在国内也很慢，很容易网络连接超时，-i https://pypi.tuna.tsinghua.edu.cn/simple能够切换到清华源下载</span><br><span class="line"></span><br><span class="line"># 在终端中依次输入以下三行命令。这三行命令都是下载包，可能速度有点慢，但是切换源之后应该速度很快。</span><br><span class="line"></span><br><span class="line">conda install -c apple tensorflow-deps</span><br><span class="line">python -m pip install tensorflow-macos -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">python -m pip install tensorflow-metal -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li><li><p>查看是否有效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure></li></ol><p>如果能打印出版本号证明环境安装OK了，这时候会在tf这个虚拟环境中运行tensorflow</p><h2 id="在pycharm中使用刚刚配置的环境"><a href="#在pycharm中使用刚刚配置的环境" class="headerlink" title="在pycharm中使用刚刚配置的环境"></a>在pycharm中使用刚刚配置的环境</h2><p>pycharm是专用来开发python的，刚刚我们本地创建了一个可以运行tf的环境（interpreter）,我们如果想在pycharm里面去使用刚刚的环境，需要做一些配置，按照如果配置：</p><p><img src="https://s1.locimg.com/2023/03/13/444985288b1c9.jpg" alt="pycharm配置"></p><p>其中miniforge3就是上面第一步下载后生成的文件夹，里面有conda环境，通过这样配置生成的一个py项目就能使用tf的运行项目了</p><p><img src="https://s1.locimg.com/2023/03/13/dc1beddc79377.jpg" alt="效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;团队内部要做一些分享，最近ChatGPT正火，而且正好也在研究深度学习在移动设备上的相关东西，所以就想就深度学习这个方向去沉淀一些东西供参考。&lt;/p&gt;
&lt;p&gt;深度学习目前是两大框架，神仙打架。Google的Tensorflow和Meta的Pytorch，本文基于Tensorflow来讲。由于本人使用的是Mac M1版本，在折腾过程中遇到了很多问题，最终还是解决了。这里做个记录。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技能提升" scheme="http://yoursite.com/tags/%E6%8A%80%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>mmap的简单原理解析</title>
    <link href="http://yoursite.com/2023/02/07/mmap%E7%9A%84%E7%AE%80%E5%8D%95%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2023/02/07/mmap的简单原理/</id>
    <published>2023-02-06T16:00:00.000Z</published>
    <updated>2023-02-07T07:18:20.456Z</updated>
    
    <content type="html"><![CDATA[<p>mmap很早就知道一些，但是只是简单知道这个可以减少内存消耗，并不知道它的实现原理是怎么样的，所以也不知道它到底是怎么去减少内存消耗的，然后找了相关资料看了下，发现和android的bundle机制还有点相似，这里做个记录和总结</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>我们都知道linux进程分为<strong>用户空间</strong>和<strong>内核空间</strong>，后来在零拷贝原理中知道对于32位操作系统来说系统会给每个应用进程分配4G的虚拟内存空间，其中0-3G的内存地址属于用户空间，3-4G的内存地址属于内核空间。其中用户空间是不能共享的，而内核空间是运行操作系统的，它独立于普通的应用程序，是被所有应用程序共享的。所以对一个应用来说，只有3G的用户空间是属于应用本身的。参考：<a href="https://www.cnblogs.com/sparkdev/p/8410350.html" target="_blank" rel="noopener">内核空间与用户空间</a>。由于用户空间是隔离的，所以这里当一个进程想访问另外一个进程的用户数据时就涉及到进程之间的通讯了（RPC），Android使用bundle来更好的解决这个问题，后面单独写Android的bundle机制。</p><a id="more"></a><h2 id="mmap是什么"><a href="#mmap是什么" class="headerlink" title="mmap是什么"></a>mmap是什么</h2><p>mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对应关系。</p><p>实现了这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写改动过的页面到对应的文件磁盘上，即完成了对文件的操作而不必要再调用read，write等系统函数。相反，内核空间对这段区域的修改也直接反映用户空间（因为内核空间被所有进程公用），从而实现不同进程间的 文件共享。</p><h2 id="mmap的简单原理"><a href="#mmap的简单原理" class="headerlink" title="mmap的简单原理"></a>mmap的简单原理</h2><h3 id="传统的读写文件"><a href="#传统的读写文件" class="headerlink" title="传统的读写文件"></a>传统的读写文件</h3><p>一般来说，修改一个文件需要三个步骤</p><ul><li>把文件内容读入到内存中</li><li>修改内存中的内容</li><li>把内存的数据写入到文件中</li></ul><p>过程如下图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b5d56c88f4b49ddba0ed1b014928a49~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt></p><p>从上图可以看到磁盘中的文件file要被用户修改的时候，需要先把file文件拷贝到<strong>页缓存（page cache）</strong>中，然后通过系统函数read读到用户空间的临时buffer中（copy），修改之后，再通过write方法（copy）写回页缓存中，最终改变了磁盘中的file的文件。其中，页缓存是读写文件的中间层，内核使用页缓存与文件的数据块（连续的内存地址）关联起来。所以应用程序读写文件时，实际操作的是页缓存。这里为了实现文件修改在内存中是做了两次copy的。</p><h3 id="使用mmap读写文件"><a href="#使用mmap读写文件" class="headerlink" title="使用mmap读写文件"></a>使用mmap读写文件</h3><p>从上面读写文件的过程中，我们可以看到有一个地方是可以优化的：如果可以直接在用户空间操作（读写）页缓存，那么久可以免去页缓存的数据复制到用户空间的临时buffer的过程。mmap其实就是做这个事情的。</p><p>使用mmap系统调用可以将用户空间的虚拟内存地址与文件进行映射（怎么做到的？），对映射的虚拟内存地址就行读写操作就如同对文件进行读写操作一下，如图：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35a55af52d3042c79613feb41fc662d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt></p><p>mmap最终是调用了sendfile方法来实现映射关系的（具体怎么做到将用户空间的内存和页缓存做映射的，可以看这篇文章：<a href="https://developer.aliyun.com/article/375144" target="_blank" rel="noopener">认证分析mmap</a>，这里不深入写，只要知道mmap的第一层原理，它减少了将内核空间往用户空间拷贝的动作，所以性能会很好。）</p><p>由于读写文件都需要经过页缓存，所以mmap映射的正是文件的页缓存，而非磁盘中的文件本身。由于mmap映射的是文件的页缓存，所以就涉及到同步的问题：页缓存上面时候把数据同步到磁盘？linux内核并不会主动把mmap映射的页缓存同步到磁盘，而是需要用户主动触发。同步mmap映射的内存到磁盘有4个时机：</p><ul><li>调用msync函数主动进行数据同步（主动）</li><li>调用munmap函数对文件进行解除映射关系时（主动）</li><li>进程推出时（被动）</li><li>系统关机时（被动）</li></ul><p>mmap 函数会返回映射后的内存地址，我们可以通过此内存地址对文件进行读写操作。如图<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b59dc54fc6fc42a294e3cf1defc1a3b9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mmap很早就知道一些，但是只是简单知道这个可以减少内存消耗，并不知道它的实现原理是怎么样的，所以也不知道它到底是怎么去减少内存消耗的，然后找了相关资料看了下，发现和android的bundle机制还有点相似，这里做个记录和总结&lt;/p&gt;
&lt;h2 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h2&gt;&lt;p&gt;我们都知道linux进程分为&lt;strong&gt;用户空间&lt;/strong&gt;和&lt;strong&gt;内核空间&lt;/strong&gt;，后来在零拷贝原理中知道对于32位操作系统来说系统会给每个应用进程分配4G的虚拟内存空间，其中0-3G的内存地址属于用户空间，3-4G的内存地址属于内核空间。其中用户空间是不能共享的，而内核空间是运行操作系统的，它独立于普通的应用程序，是被所有应用程序共享的。所以对一个应用来说，只有3G的用户空间是属于应用本身的。参考：&lt;a href=&quot;https://www.cnblogs.com/sparkdev/p/8410350.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;内核空间与用户空间&lt;/a&gt;。由于用户空间是隔离的，所以这里当一个进程想访问另外一个进程的用户数据时就涉及到进程之间的通讯了（RPC），Android使用bundle来更好的解决这个问题，后面单独写Android的bundle机制。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技能提升" scheme="http://yoursite.com/tags/%E6%8A%80%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>随想（一）</title>
    <link href="http://yoursite.com/2023/01/18/%E9%9A%8F%E6%83%B3/"/>
    <id>http://yoursite.com/2023/01/18/随想/</id>
    <published>2023-01-17T16:00:00.000Z</published>
    <updated>2023-01-18T03:42:39.346Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.</strong> 最近在学习一些管理方面的知识，从思想层面对管理者有了新的认识。执行者和管理者的思维模式是完全不一样的，而大部分走上管理岗位的又往往是那些业务骨干，业务骨干其实就是优秀的执行者，能够很完美的完成领导交付的任务，他们也是领导重点考察和培养的对象。但是，由于执行者和管理者存在的最大不同点在于：思维模式，所以刚进入到管理岗位的执行者会很不适应，有很强的执行者思维惯性。这个时候如果有人可以点拨你，或者自己学习是可以少走很多弯路的。那么，执行者和管理者思维的区别是什么呢？</p><ul><li>执行者：依靠自己，索取资源，局部最优，靠自己的个人能力达成个人目标</li><li>执行者：教练他人，整合资源，全局最优，依靠团队（他人）的能力来达成团队目标</li></ul><p>这里本质不同的是一个是依靠单打独斗达成目标，一个是带领团队依靠别人优秀的能力来达成目标。</p><p><strong>2.</strong> 人际交往的本质其实是价值交换。这个价值可以是有形的也可能是无形的，比如权利，钱，能力或者品质等。你能融入某个圈子说明你具备了这个圈子需要的价值，反之，你融入不了某个圈子就证明你缺少某些价值。人际交往建立后其实就是信任的问题，信任是一个很抽象的概念，这里有个公式可以把信任拆解成几个纬度，让抽象的信任可以被稍微具象化一些：</p><blockquote><p>信任 = （专业性 + 可靠性 + 同频性）/ 自我意识</p></blockquote><p>这里专业性和可靠性都好理解，同频性是指你们具有相似的思维方式，爱好，信仰之类的东西；而自我意识则是你的主观意识存在。这里我认为比较重要的是自我意识，当自我意识很小，信任就可以无限大；当自我意识很大，信任就可以无限小。这里的自我意识其实是说你的思想认识，价值观，看问题视角，认知，感受，调整等。自我意识小，说明你会依附权威，不太会提出反对意见或者都没有反对的意识，这时候你会无限信任比你强的人所提出的观点。那是不是自我意识强就好呢，我觉得也不是，自我意识强是要建立在知识，能力，情感，判断，地位等等具有充足储备的前提下，是需要强大的能力来保障的，盲目的自我意识强是毫无意义的。所以，<strong>信任其实就是在合理自我意识下的价值交换</strong>。合理自我意识还隐藏一个重要的点就是平等，平等的关系才会带来合理的自我意识（自我意识是可以被自我去调整的），信任才有可能被达成，否则我为什么要降低我的自我意识来和你交换？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 最近在学习一些管理方面的知识，从思想层面对管理者有了新的认识。执行者和管理者的思维模式是完全不一样的，而大部分走上管理岗位的又往往是那些业务骨干，业务骨干其实就是优秀的执行者，能够很完美的完成领导交付的任务，他们也是领导重点考察和培养
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>视频编码基础</title>
    <link href="http://yoursite.com/2022/11/01/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2022/11/01/视频编码基础/</id>
    <published>2022-10-31T16:00:00.000Z</published>
    <updated>2023-03-20T09:51:03.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频传输基本原理"><a href="#视频传输基本原理" class="headerlink" title="视频传输基本原理"></a>视频传输基本原理</h1><p>视频是利用人眼的视觉暂留的原理，通过播放一系列的图片，使人眼产生运动的感觉。单纯传输视频画面，视频量非常大，对现有的网络和存储来说很不友好。为了能够使视频便于传输和存储，人们发现有视频有大量重复的信息，如果将重复信息在发送端去掉，在接收端回复回来，这样就大大减少了视频数据的文件，因此有了H.264视频压缩标准。</p><p>视频里面最常用的编码格式就说H.264，基于这个编码格式还有H.265（后续研究），音频采样数据会采用AAC编码格式进行压缩。视频内容经过编码压缩后，确实有利于存储和传输。不过当要观看播放视频时，相应也需要解码过程，将压缩的视频还原。所以，编解码之间显然需要约定一种协议，这种协议大概的流程是：<strong>编码器将多张图像进行编码后产生一段一段的GOP（Group of picture），解码器则在播放时读取一段一段的GOP进行解码后读取画面再渲染显示。</strong></p><p><img src="https://s1.locimg.com/2023/03/20/e4f56c4c5d34f.png" alt="1.png"></p><blockquote><p>GOP是一组连续的画面，由一张I帧和数张B帧和P帧组成，它是视频图像编码器和解码器存取的基本单位，它的排列顺序将会一直重复到影像结束。I帧是内部编码帧（也称为关键帧），P帧是前向预测帧（前向参考帧），B帧是双向内插帧（双向参考帧）。简单说，I帧是一个完整的画面，而P帧和B帧记录的是相对于I帧的变化。如果没有I帧，P和B是无法解码的。</p></blockquote><p><img src="https://s1.locimg.com/2023/03/20/44f418589b027.png" alt="在H.264编码中I帧，P帧，B帧传输的视频画面"></p><a id="more"></a><h1 id="I帧-P帧-B帧"><a href="#I帧-P帧-B帧" class="headerlink" title="I帧,P帧,B帧"></a>I帧,P帧,B帧</h1><ul><li><strong>I帧</strong><br>I帧:即Intra-coded picture（帧内编码图像帧），I帧表示<strong>关键帧</strong>，你可以理解为这一帧画面的完整保留；每个GOP组中第一帧一定是I帧，而且是一种特殊的I帧，也可以称为IDR帧，一个GOP可以有很多I帧，但是只有1个IDR帧。I帧法是基于离散余弦变换DCT（Discrete Cosine Transform）的压缩技术，这种算法与JPEG压缩算法类似。采用I帧压缩可达到1/6的压缩比而无明显的压缩痕迹。<br><img src="https://s1.locimg.com/2023/03/20/0818121e947e7.png" alt="2.png"></li></ul><p><u>I帧的特点：</u></p><ol><li>它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输</li><li>解码时仅用I帧的数据就可以重构完整的图像</li><li>I帧描述了图像背景和运动主体的详情</li><li>I帧不需要参考其他画面而生成</li><li>I帧是P帧和B帧的参考帧</li><li>I帧所占数据的信息量比较大</li></ol><ul><li><strong>P帧</strong><br>P帧:即Predictive-coded Picture（前向预测编码图像帧）。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）<br><img src="https://s1.locimg.com/2023/03/20/212be6bd5232b.png" alt="3.png"></li></ul><p><u>P帧的特点：</u></p><ol><li>P帧是I帧后面相隔1-2帧的编码帧</li><li>P帧采用运动补偿的方法传送它与前面的I或者P帧的差值及运动矢量预测误差</li><li>解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像</li><li>P帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧</li><li>P帧可以是其后面P帧的参考帧，也可以是其前后的B帧的参考帧</li><li>由于P帧是参考帧，它可能造成解码错误的扩散</li><li>由于是差值传输，P帧的压缩比较高（大概I帧的一半大小）</li></ol><ul><li><strong>B帧</strong><br>B帧：即Bidirectionally predicted picture（双向预测编码图像帧)。B帧是双向差别帧，也就是B帧记录的是本帧与前后帧的差别，换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累。<br><img src="https://s1.locimg.com/2023/03/20/24ab218973a53.png" alt="4.png"></li></ul><p><u>B帧的特点</u></p><ol><li>B帧是由前面的I或P帧和后面的P帧来进行预测的</li><li>B帧传送的是它与前面的I帧或者P帧和后面的P帧之间的预测误差及运动矢量</li><li>B帧是双向预测编码帧</li><li>B帧压缩比最高，对解码性能要求也高（大概I帧的四分之一）</li><li>需要参考前一个I帧或者P帧及其后面的一个P帧来生成一张完整的视频画面，所以P帧与B帧去掉的是视频帧在时间维度上的冗余信息。</li></ol><p><u>B帧存在的价值</u><br>从上面分析可知，I帧和P帧的解码算法比较简单，资源占用比较少，I只要自己完成就行了，P帧也只需要解码器把前一个画面缓存一下，遇到P时就使用之前缓存的画面就好了，如果只有I和P，解码器可以不用处理后续数据，边读边解码，那为什么还要引入B帧呢？因为B帧记录了前后帧的差别，<strong>比P帧能节约更多空间</strong>，这样视频文件可以变小，但是相应的就要求解码器性能比较高了，因为在解码时，不仅要用之前缓存的画面，还要知道下一个I或者P的画面（也就时说要预读，预解码），而且，B帧不能简单丢掉，因为B帧其实也包含了画面信息，如果简单丢掉，并用之前的缓慢简单重复，就会造成画面卡顿（丢帧）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视频传输基本原理&quot;&gt;&lt;a href=&quot;#视频传输基本原理&quot; class=&quot;headerlink&quot; title=&quot;视频传输基本原理&quot;&gt;&lt;/a&gt;视频传输基本原理&lt;/h1&gt;&lt;p&gt;视频是利用人眼的视觉暂留的原理，通过播放一系列的图片，使人眼产生运动的感觉。单纯传输视频画面，视频量非常大，对现有的网络和存储来说很不友好。为了能够使视频便于传输和存储，人们发现有视频有大量重复的信息，如果将重复信息在发送端去掉，在接收端回复回来，这样就大大减少了视频数据的文件，因此有了H.264视频压缩标准。&lt;/p&gt;
&lt;p&gt;视频里面最常用的编码格式就说H.264，基于这个编码格式还有H.265（后续研究），音频采样数据会采用AAC编码格式进行压缩。视频内容经过编码压缩后，确实有利于存储和传输。不过当要观看播放视频时，相应也需要解码过程，将压缩的视频还原。所以，编解码之间显然需要约定一种协议，这种协议大概的流程是：&lt;strong&gt;编码器将多张图像进行编码后产生一段一段的GOP（Group of picture），解码器则在播放时读取一段一段的GOP进行解码后读取画面再渲染显示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.locimg.com/2023/03/20/e4f56c4c5d34f.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GOP是一组连续的画面，由一张I帧和数张B帧和P帧组成，它是视频图像编码器和解码器存取的基本单位，它的排列顺序将会一直重复到影像结束。I帧是内部编码帧（也称为关键帧），P帧是前向预测帧（前向参考帧），B帧是双向内插帧（双向参考帧）。简单说，I帧是一个完整的画面，而P帧和B帧记录的是相对于I帧的变化。如果没有I帧，P和B是无法解码的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.locimg.com/2023/03/20/44f418589b027.png&quot; alt=&quot;在H.264编码中I帧，P帧，B帧传输的视频画面&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技能提升" scheme="http://yoursite.com/tags/%E6%8A%80%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>线程池的一些知识点回顾</title>
    <link href="http://yoursite.com/2022/09/10/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2022/09/10/线程池知识点解析/</id>
    <published>2022-09-09T16:00:00.000Z</published>
    <updated>2022-11-23T07:26:33.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对线程池的一些理解"><a href="#对线程池的一些理解" class="headerlink" title="对线程池的一些理解"></a>对线程池的一些理解</h1><ol><li>线程池是对线程的管理和调度，我们自己当然也可以去新建线程去处理并发操作，但是线程池提供了很好的解决线程之间调度，管理的能力，这些能力可能比我们自己去实现更优。</li><li><p>创建线程池有两种方式（本质上是一种），如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Executors封装好的线程池创建方法去创建</span></span><br><span class="line">Executors.newSingleThreadExecutor();</span><br><span class="line">Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ThreadPoolExecutor来创建，其实上一种本质上也是调用这个来创建线程池的(阿里规范推荐)</span></span><br><span class="line">ExecutorService executors = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">0L</span>,</span><br><span class="line">        TimeUnit.MILLISECONDS,</span><br><span class="line">        <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>),</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.DiscardPolicy());</span><br><span class="line"><span class="comment">//其中参数1，为核心线程数；2，最大线程数；3，线程存活时间；4，线程的阻塞队列；5，线程（任务）熔断机制</span></span><br></pre></td></tr></table></figure></li><li><p>基于第二点解释这些参数的意义</p></li></ol><ul><li>a, 核心线程数是线程池初始化就会创建的线程，并且该线程不会被回收；</li><li>b, 最大线程数是线程池中允许存在的最大线程数量；</li><li>c, 线程存活时间指的是当非核心线程在处理完任务不再使用后多久被线程池回收；</li><li>d, 线程阻塞队列是任务队列，线程处理的任务会按照队列的特点存在队列中；</li><li>e, 线程熔断机制是当线程处理不过来任务时，应该做一些什么策略。</li></ul><ol start="4"><li>线程池运行的流程</li></ol><ul><li>线程池刚创建的时候，里面没有一个线程，任务队列是做为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</li><li>当调用execute()方法添加一个一个任务时，线程池会做几个判断<ul><li>a，如果正在运行的线程数量小于核心线程数，则马上创建线程执行这个任务</li><li>b，如果正在运行的线程数量大于或等于最大线程数，则把任务放入队列中</li><li>c，如果这时候队列满了，运行的线程数小于最大线程数，则创建线程立马执行这个任务</li><li>d，如果队列满了，运行的线程数大于等于最大线程数，则执行线程熔断机制</li></ul></li><li>当一个线程完成任务时，它会从队列中取下一个任务来执行</li><li>当一个线程没有任务执行，超过线程存活时间时，线程池会判断，如果当前运行线程大于核心线程数，那么这个线程就会被回收。所以最终线程池的线程数量会维持为核心线程的数量。</li></ul><blockquote><p>这样的过程说明，并不是先加入任务就一定先执行，看下面的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executors = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">3</span>,</span><br><span class="line">                 <span class="number">6</span>,</span><br><span class="line">                 <span class="number">0L</span>,</span><br><span class="line">                 TimeUnit.MILLISECONDS,</span><br><span class="line">                 <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10</span>),</span><br><span class="line">                 <span class="keyword">new</span> ThreadPoolExecutor.DiscardPolicy());</span><br><span class="line">         <span class="comment">//ThreadTest01 test01 = new ThreadTest01();</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">             <span class="keyword">int</span> taskId = i;</span><br><span class="line">             Runnable task = () -&gt; &#123;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                     System.out.println(<span class="string">"thread-"</span> + Thread.currentThread().getName() + <span class="string">" is saving data:"</span> + taskId);</span><br><span class="line">                     <span class="comment">/*模拟存储数据耗时*/</span></span><br><span class="line">                     Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                     e.printStackTrace();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;;</span><br><span class="line">             executors.execute(task);</span><br><span class="line">         &#125;</span><br><span class="line"> <span class="comment">/*运行结果：首先核心线程为3所以立马执行任务1，2，3；然后任务4到13被放入到队列中，14，15，16又会被新创建的3个线程（最大为6）执行，</span></span><br><span class="line"><span class="comment"> 再增加任务17到20时由于当前已经有6个线程在处理任务了，所以17到20的任务由于ThreadPoolExecutor.DiscardPolicy()策略会被丢弃。</span></span><br><span class="line"><span class="comment"> 然后6个线程又会依次从队列冲取出4到13任务去执行。*/</span></span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><h1 id="线程池中几种队列的理解"><a href="#线程池中几种队列的理解" class="headerlink" title="线程池中几种队列的理解"></a>线程池中几种队列的理解</h1><ol><li>SynchronousQueue<br> synchronousQueue本身没有容量，是无缓冲等待队列，是一个不存储元素的阻塞队列，会直接将任务交给消费者，必须等队列中的添加元素被消费后才能继续添加新的元素。</li><li>LinkedBlockingQueue</li><li>ArrayBlockingQueue</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对线程池的一些理解&quot;&gt;&lt;a href=&quot;#对线程池的一些理解&quot; class=&quot;headerlink&quot; title=&quot;对线程池的一些理解&quot;&gt;&lt;/a&gt;对线程池的一些理解&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;线程池是对线程的管理和调度，我们自己当然也可以去新建线程去处理并发操作，但是线程池提供了很好的解决线程之间调度，管理的能力，这些能力可能比我们自己去实现更优。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建线程池有两种方式（本质上是一种），如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//通过Executors封装好的线程池创建方法去创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executors.newSingleThreadExecutor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用ThreadPoolExecutor来创建，其实上一种本质上也是调用这个来创建线程池的(阿里规范推荐)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService executors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;0L&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TimeUnit.MILLISECONDS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor.DiscardPolicy());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//其中参数1，为核心线程数；2，最大线程数；3，线程存活时间；4，线程的阻塞队列；5，线程（任务）熔断机制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于第二点解释这些参数的意义&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;a, 核心线程数是线程池初始化就会创建的线程，并且该线程不会被回收；&lt;/li&gt;
&lt;li&gt;b, 最大线程数是线程池中允许存在的最大线程数量；&lt;/li&gt;
&lt;li&gt;c, 线程存活时间指的是当非核心线程在处理完任务不再使用后多久被线程池回收；&lt;/li&gt;
&lt;li&gt;d, 线程阻塞队列是任务队列，线程处理的任务会按照队列的特点存在队列中；&lt;/li&gt;
&lt;li&gt;e, 线程熔断机制是当线程处理不过来任务时，应该做一些什么策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;线程池运行的流程&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;线程池刚创建的时候，里面没有一个线程，任务队列是做为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。&lt;/li&gt;
&lt;li&gt;当调用execute()方法添加一个一个任务时，线程池会做几个判断&lt;ul&gt;
&lt;li&gt;a，如果正在运行的线程数量小于核心线程数，则马上创建线程执行这个任务&lt;/li&gt;
&lt;li&gt;b，如果正在运行的线程数量大于或等于最大线程数，则把任务放入队列中&lt;/li&gt;
&lt;li&gt;c，如果这时候队列满了，运行的线程数小于最大线程数，则创建线程立马执行这个任务&lt;/li&gt;
&lt;li&gt;d，如果队列满了，运行的线程数大于等于最大线程数，则执行线程熔断机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当一个线程完成任务时，它会从队列中取下一个任务来执行&lt;/li&gt;
&lt;li&gt;当一个线程没有任务执行，超过线程存活时间时，线程池会判断，如果当前运行线程大于核心线程数，那么这个线程就会被回收。所以最终线程池的线程数量会维持为核心线程的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这样的过程说明，并不是先加入任务就一定先执行，看下面的例子&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService executors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;number&quot;&gt;0L&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 TimeUnit.MILLISECONDS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor.DiscardPolicy());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//ThreadTest01 test01 = new ThreadTest01();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; taskId = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             Runnable task = () -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;thread-&quot;&lt;/span&gt; + Thread.currentThread().getName() + &lt;span class=&quot;string&quot;&gt;&quot; is saving data:&quot;&lt;/span&gt; + taskId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;comment&quot;&gt;/*模拟存储数据耗时*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     Thread.sleep(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             executors.execute(task);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/*运行结果：首先核心线程为3所以立马执行任务1，2，3；然后任务4到13被放入到队列中，14，15，16又会被新创建的3个线程（最大为6）执行，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; 再增加任务17到20时由于当前已经有6个线程在处理任务了，所以17到20的任务由于ThreadPoolExecutor.DiscardPolicy()策略会被丢弃。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; 然后6个线程又会依次从队列冲取出4到13任务去执行。*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>跨平台技术Flutter技术规划</title>
    <link href="http://yoursite.com/2022/06/29/Flutter%E6%8A%80%E6%9C%AF%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2022/06/29/Flutter技术规划/</id>
    <published>2022-06-29T13:44:54.453Z</published>
    <updated>2023-03-20T10:33:34.486Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1ebd1a953ba1b8d53e120b6f764ba6e6e387bfc366584eac2fbc9a377ee939e9">ebb08aa0288e261ddeb0b4aadf3d63d9334d551ecfb20a988ee264721d658bcc117ae618d7bd0102b1a64628349aa697db762dff100a77ffc0d8dce728a495b90f3c3638a9eb9cccdd998e9c9068ef07abb960ad41796745f8645488ff22941863cf33a0fca5e848719cc18efd78040c594cb6ef6c42a8710e529b4ab25a45e37659edca2ad19d176eb3c649334813ec4500dafd3757a9d09de6ec43e302575b01bccbaabddc745652c5e40e7ad0c0b42bd4f13ee4d8a0e3467f68df90b6b42e9f72e80dd3bdc3d3720ef41136eeca11a8b68e171417553a7629954389d606e260a62765aa4f3d42420eb61cc4aba9d680191de54edd1a6462f7529747889f6540a282fb509283859a69f42ec299a29f96089c42841fab1d28b59d765124f06acbf125857717111d9c6e32ee694ec4d62163180f9336072d0380fa76d12d628f4b1c6a831d6bb9bca67fcb1c6c8717a32b3f70f67fe5444882e66dc16a977364eb1295c6cf68ced1cfb2b4ab0fc42ab9e7c67a47b319609250d69cfc4245794a500787c55ed6da1ba188355e416acde0458a2f2197a3fec0ceb8e52c2374f1f7127b9666df428162ddaa8433d9c0d890918a0359d8a307a4a35363cda78d8ac2fde860c31bf14573cfb044485b47579ec867e00bd0caadf74d7a2298c146c59cdcf3194efb7161fd38edc4f76b469f24d2369f7e52ed852065326096d384708cd5aa79c258e3210ab8eb8c3f78f710e92742349a147cf46ad303cd7aca5c3dc9df804caa726deaa48a122bd3ccfffe6ddb35b8897e82f811d1413025d34bc2b6954d05e7c22e5a0acf8462c48159440293c9cbc9d9118b8ec71fbc3cdea05a71501aee182cbfcde2f88403f398b10257f0f64b14a2a467e353d61534d076231764f71078cbbc1fadbece02cc8a73c0741975ce60b35dfa02726bdb0d9f16f456d446535e61ddd5cd116c26da4b73f2874c0e3144f803d94b2f923ce0003db4874b0019c9fed3c4455a197480302c9a7470e5f02d22987baed37f4a1425b330b5e93e84e7c2c5175e029ff6aa909f3b9fcb8a6e7c88420833acf57457c15b7436413e5db5c941e18702ef27f0c4952ee999c96159006e16885a62ab9cecf954ed79e3897a6c6d5f5a140ccb9aba804330ddefea460af58b91e9a10243f8f412711cbdccbdc0f1139975d081ffa68af29e6c842fedd9a7814ce9f88c569f8b0ded0355c469f355113e3d30534d3ec1bb23885f9bc122d0984c44b795ae65a5be52d6e827cf1f2502e09dff3e1d67f8b206fcfa22dc15a9f7b802e9956359275a52d26cf7df222a04f82e26266e33e400ea6faa8e790bf7051459bf87013a614109860cb31300805450e3683265621c8389817064ed51e43aeade62e251b324528fdc1904f4991b8e5d0d7975f5875669c2c8d3f965cc05fd1ab9f71e6ea638ac69a6cf4ea9b72ff337ece5fea85906584c48d5ae133a29cd557574e69221b03156d8008e7da886ab90c87318eedb10756f5bb8f7264621094710e8de6742350903f2896d1a52ee4a3fd2ffb91231a4bd0bd599af4cb38c2a215473b5f884348f8f79f8a8f5cbbe5fc972cbd0a00715b87f35f674f670475b1b6ecf83834b725a4938fc8b6dbdaec50abe9f2edd3747208b1f213e05952679241288c9601f29e5745b0716dd4bc6a0dbd2abd28c6441fca636d2d0f4815117d9768d2927407839f9df0485d9281045cf86cd6a07a0a0ba79b4195f0a1c3a3977d3c3b8be7732c71430450fe21aa7e25d5ff72636240976edb429444c8e06a8034cba97c76244ba2f5a6ae3c6ff27f9c20544f89592c2edca786b32bdb47c25c2a7692c25423897dace711445390b5863b07165742cdfc816980daf7352c8e4c0b13e7082ddb37476a7ffd632a9c1c7dce017a870fbe420d20071a50a9e984d9d55b242696f2c44b425d8646b1dcc453b587bcf891cb5180ac98a1319f5ff88a091bf98a4009e1d3c6f0edda50e20415eff0c74555c52319b9add0003d03f7abaadaaccbf7b558026550c39d2bb98c55739596835512c41639a6db27769804dc755304c3f0bf230b9236d881c0aecf10014a0549f416c4fd5c6b7ce4eeb45a253de412aa7db96ce2f0b8b554757d6f1fb9ce43b39d1f059445f631c5c272293cac6941eda9b6c380cf1b47b4f55f2a930edc48e1cd86754e6224f4e74a0ff6458f387a7df5c2c0680f2f0fb6f25c26909ed8234539ac431c3dd088603c31d7a3682550209d854d1e7b2767bc45eea98787160ae652ea70d3d627282e87c20ba404dd6aa058908ae8b2ce564fa381101dff0b9016a9cd926c83225bb3d0d6ddc7cf5cc6d0c13ca6d204993f1e35ddbd95339fd20c45102efbf136b5951a4be1e6954d8d65032eb7fab7f7e8191cdb42a676d4987a1d14c7ac00b74aa2988712598e3b93e9421e87892d0350f88c1a9d1c8f090e98a0390a10f0eac73b55ef4fea75ceb79cfa50595d91e403beb0391f4a1c5cd60d38bab4754115818690b8a238ad66345807cbbd2e0b69ddf602120add94cbe3a706e826b4bb47c86c5f9599891e8443bcc6c04dac55bfc458fed5c881f995a18ba5604d05d4fb01281a9f2cd0a062b7e6b4a4d2c7f657757f448515aa884e0874660ced85c3620e10e1e33c3bbb216e33adf14fa95f30f85e5afe861949a08533cdaea4817fd32a2d59da42496b74791b7f62673de8fa4635107e5bbc01848e6fa70acbfe8ee3a093b4fd264a0c03365459d17fb7db50541d782129beb89107b2a0f18aaafccf8f34364a754dd10d5c000b6c8529a9872499c854c6febf8d158219de398ffcab152a18e03c4d2ee79dcf6e10aeb0b17e470a30a406b85551789925c290c2d1969db29ace80686027f62f218eeeb136c6541509130cd898865a3befef178f6cb4a5f3d4118dc493762fd5aa129710090c1caa40477f4383d7e520d7d5e9de39037e8ce5e3a8961d2d9376c0127742a3e42ef01e311d3f54112f3aadeb92f0ff4633db6bce55b43ac7f01512d7e087632564c247913bca66911bda72cf70761e3e4724074ec9050d8f0ce1bf0a05a2c2c6e6bafc343280e6a0d60604552a23175fe1db721a7b5378d6e8060193282f0d349d6bd0a0400f50e9e4cfd3122e5be26687e2323479a59dd4d03ab3fc004a6ab172ee19d051ab5f70fa5d6bafc65ebcc30ff359964c8c427c4569eb8be78cae7ec642fd9f823ae3f2e08d4d006201fb8098597b8cfb6d6c0efe84a798f4b50796361e0c6152080686327b916390b64f43f81d295cbe53d1c6a0528ec885e1d041c756e02cb938e5b410617edfcf56b66b3ea56a2c97853c3adcc458c4e7c2c4e4db11e79016e59f0c35f52220a4a29dbf22c2d03388b39395423130e65a498ef969e44b92d4d6d2cc22001becd01dc9689bc9c7f62874d70a1ef6d1bd114e0d979e5c7c223bba994c59f1bfb4e4e83400b9b029cc8e98b0f327c2afea64526ab7a468871ddadb874f4ae51493815714d86f7760ab7ec87873dac2108e6da6297078eabdc2fa2e499fee6064c887320abad093b030c4932fedafe985258688f161874277941b7a7e2f7492990956f1ab049003e75d39fbb8faa453c394c4ec2a743495ca06a058f21e0cc3506c23bdba88ae944934b2281eeba8d30331fcec3d81b8e9db2a299824655d56d005c2ca53e40c5042766d4a6e2b6dac071c4e1f25f624c4a3648850fab2c8dc7b3983f6ca60c9568dd925b9c55e594a0080abc76fc09ee50f9a12ce14dc1fdf3db6cc40bc04c2b41ba3b2a304776cb9f6e8c36f5a280818bf49c0b6bc491d1a42a1fefde7ca591f553f3f56a687291b1c163646cd807ee100f085fd871a1c0ba3570ffe5d9a3e76d0a162bc4cfdd149ee202f0cce1d153c5c986509cc90931c9a414083276d3af187fbf3618555b0d52f60664518b3e2ced8aae815c8b44dde554ec5ddb05640ef20c2a266a40d4e242e67e1e4d797c2879121f28be8143a484605f70d494b63e1d346b4fe69cdb79ca220d4246368e7c507a2bcd9025f02d95d77e309b506cd98e9071e0dce02720ddce1215024c4edb89193248a132af81ab84a3ce887fb9b1735dad5fa370949ddf1776fba25c57c49ab190895f8e684f193cac4f54998d1453c96fd8bb4e09c72c8530ea66dad9f14dbfe00f50082a019d38d92f974d43b318849f8a5fdac1a758069c677e417f016179718564db1305bb0d86269743bf8bd493605f0ccca1cfcc4c682d345cadd2b74064f2b6126c3829c786ad5acc93991b33225e54ea340eb4d0088874f2615519748c4a01ffe4bc827b69f7fdd451167303d49aecde69e4136a1461479719217c3487f7b392c611ada78bab57a7ce3c4f36530f6e4b09d5e0398856b89e429c06afdeb72024928915e2cba0c5e94318a149628c6ea4dad7042a6bf9870358f7439f060e0134d3541e3f160006cc63495d7b87e739b94b1cd98dbcac8cf6faa5eaaefa85cdf7421e37086a008a4ef496e03c6d57e2cb3c72c55b83d98aa93c7ee3da0352776d9537d3ddbd0d30023a34edb16100dc24c67b3fa12c4859b55626bcb681bd88ee9648d88dbe31c344314b116e6b3bd853f53fe33363f5ed5cd89f055445715bbf7dbbeff3bb78d190313b59425f2902209b0d07f90e237a7a805dea163ba925b7daca365f5706e19d0308862a55a176dee05fefa8c15d6a2fdddb889a0797a47334046480799ea968fb663463afc31bc6cb2713da89f33804421807b9a2b5d169e63dfb1358d2a7500a6796b935fb4629ea30e4404d84326e4a864ab92d9529cc29a1202371a490dcbd5d90ff3c1f8f4599271b42f7a02d4e1d088bee835564fd385fa6b631b989c9821e4f9fe76e04ec5c1c722629fe24c3a2b316a66b101639bb3845fd5f23f6830da0c1906b08d663f5502ce40e9b66250b234a73b676057be9baa47a9b7872</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      私有文章, 请输入密码查看。
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="跨平台" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://yoursite.com/2022/06/28/Java%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2022/06/28/Java 反射机制/</id>
    <published>2022-06-27T16:00:00.000Z</published>
    <updated>2024-03-19T03:23:36.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么叫反射"><a href="#什么叫反射" class="headerlink" title="什么叫反射"></a>什么叫反射</h1><p>Java中我们创建对象一般都是用“<strong>new</strong>”这个关键字的，例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setName(<span class="string">"Ervin"</span>);</span><br></pre></td></tr></table></figure></p><p>反射则是一开始不知道要初始化的对象是什么，所以没办法new出一个对象，这时候就需要用到反射，例如我们使用第三方SDK的时候有可能没有提供api，只能通过反射去获取类中的方法等。按照上面生成对象的例子，使用反射是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="string">"com.ervin.entity.Person"</span>);</span><br><span class="line">Method method = cls.getMethod(<span class="string">"setName"</span>, String.class);</span><br><span class="line"><span class="comment">//Object person = cls.newInstance();</span></span><br><span class="line">Constructor constructor = cls.getConstructor();</span><br><span class="line">Object person = constructor.newInstance();</span><br><span class="line">method.invoke(person, <span class="string">"Ervin"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>直接new对象是静态模式，在代码编译前就知道需要生成什么对象；反射是在运行时才知道要生成什么类，是动态的</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么叫反射&quot;&gt;&lt;a href=&quot;#什么叫反射&quot; class=&quot;headerlink&quot; title=&quot;什么叫反射&quot;&gt;&lt;/a&gt;什么叫反射&lt;/h1&gt;&lt;p&gt;Java中我们创建对象一般都是用“&lt;strong&gt;new&lt;/strong&gt;”这个关键字的，例如&lt;br&gt;&lt;figure
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="技能提升" scheme="http://yoursite.com/tags/%E6%8A%80%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>怎么看懂UML类图</title>
    <link href="http://yoursite.com/2022/05/19/%E6%80%8E%E4%B9%88%E7%9C%8B%E6%87%82UML%E7%B1%BB%E5%9B%BE%E5%92%8C%E6%97%B6%E5%BA%8F%E5%9B%BE/"/>
    <id>http://yoursite.com/2022/05/19/怎么看懂UML类图和时序图/</id>
    <published>2022-05-18T16:00:00.000Z</published>
    <updated>2022-05-19T13:05:47.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从一个例子开始"><a href="#从一个例子开始" class="headerlink" title="从一个例子开始"></a>从一个例子开始</h1><p>请看一下这个类图，类之间的关系是我们需要关注的：<br><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2dzjchqwhj20ns0bjt8w.jpg" alt="UML例图"></p><ul><li>车的类图结构为《abstact》,表示车是一个抽象类；</li><li>车有两个子类小汽车和自行车，它们之间的关系为<strong>实现关系</strong>，<em>使用带空心箭头的虚线表示</em>；</li><li>SUV是小汽车的一种，继承自小汽车，他们之间是<strong>泛化关系</strong>，<em>使用带空心箭头的实线表示</em>；</li><li>小汽车和轮胎和发动机为<strong>组合关系</strong>，表示轮胎是小汽车的一部分，<em>使用带实心箭头的实线表示</em>；</li><li>学生和班级之间是<strong>聚合关系</strong>（下面会介绍和组合关系的区别），<em>是用带空心箭头的实线表示</em>；</li><li>学生和身份证之间为<strong>关联关系</strong>（下面会介绍和组合关系的区别），<em>使用一根实线表示</em>；</li><li>学生上学需要用到自行车，与自行车是一种<strong>依赖关系</strong>，<em>使用带箭头的虚线表示</em>；</li></ul><a id="more"></a><p>下面我们来解释这六种关系</p><h1 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h1><h2 id="泛化关系-generalization"><a href="#泛化关系-generalization" class="headerlink" title="泛化关系(generalization)"></a>泛化关系(generalization)</h2><p>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)，继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</p><p>eg：自行车是车、猫是动物</p><p>泛化关系用一条带空心箭头的直接表示；如下图表示（A继承自B）；</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalization.jpg" alt><br>eg：汽车是一个抽象概念，在现实世界中有对应的实现，可以用汽车定义具体的对象；汽车和SUV之间为泛化关系；<br><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalize.jpg" alt></p><blockquote><p>泛化关系在代码中表现为继承非抽象类（继承）</p></blockquote><h2 id="实现关系（realize）"><a href="#实现关系（realize）" class="headerlink" title="实现关系（realize）"></a>实现关系（realize）</h2><p>实现关系用一条带空心箭头的虚线表示；</p><p>eg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）<br><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_realize.jpg" alt></p><blockquote><p>实现关系在代码中表现为继承抽象类（实现）</p></blockquote><h2 id="聚合关系（aggregation）"><a href="#聚合关系（aggregation）" class="headerlink" title="聚合关系（aggregation）"></a>聚合关系（aggregation）</h2><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；聚合与组合的区别在于，<strong>聚合的两个部分不是强依赖，即使A不存在了，B也仍然存在；例如，部门撤销了，人员还在。</strong></p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_aggregation.jpg" alt></p><h2 id="组合关系（composition）"><a href="#组合关系（composition）" class="headerlink" title="组合关系（composition）"></a>组合关系（composition）</h2><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；<strong>组合的两个部分是强依赖的，A不存在了B也就不存在了，例如公司不在了，部门也就不存在了。</strong></p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_composition.jpg" alt></p><h2 id="关联关系（association）"><a href="#关联关系（association）" class="headerlink" title="关联关系（association）"></a>关联关系（association）</h2><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；例如，乘客和车票之间是一种关联关系，学生和学校是一种关联关系，关联关系默认不强调方向，表示对象间互相知道。如果要强调方向，如下图则表示A知道B，但是B不知道A（直线加箭头）</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_association.jpg" alt></p><blockquote><p>在代码中，关联对象通常是以成员变量的形式实现的</p></blockquote><h2 id="依赖关系（dependency）"><a href="#依赖关系（dependency）" class="headerlink" title="依赖关系（dependency）"></a>依赖关系（dependency）</h2><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；<br><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_dependency.jpg" alt><br>与关联关系不同的是，它是一种临时关系，通常在运行期间产生，并且随着运行时变化依赖关系也可能发生变化；显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p><blockquote><p>在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;从一个例子开始&quot;&gt;&lt;a href=&quot;#从一个例子开始&quot; class=&quot;headerlink&quot; title=&quot;从一个例子开始&quot;&gt;&lt;/a&gt;从一个例子开始&lt;/h1&gt;&lt;p&gt;请看一下这个类图，类之间的关系是我们需要关注的：&lt;br&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/e6c9d24egy1h2dzjchqwhj20ns0bjt8w.jpg&quot; alt=&quot;UML例图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;车的类图结构为《abstact》,表示车是一个抽象类；&lt;/li&gt;
&lt;li&gt;车有两个子类小汽车和自行车，它们之间的关系为&lt;strong&gt;实现关系&lt;/strong&gt;，&lt;em&gt;使用带空心箭头的虚线表示&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;SUV是小汽车的一种，继承自小汽车，他们之间是&lt;strong&gt;泛化关系&lt;/strong&gt;，&lt;em&gt;使用带空心箭头的实线表示&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;小汽车和轮胎和发动机为&lt;strong&gt;组合关系&lt;/strong&gt;，表示轮胎是小汽车的一部分，&lt;em&gt;使用带实心箭头的实线表示&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;学生和班级之间是&lt;strong&gt;聚合关系&lt;/strong&gt;（下面会介绍和组合关系的区别），&lt;em&gt;是用带空心箭头的实线表示&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;学生和身份证之间为&lt;strong&gt;关联关系&lt;/strong&gt;（下面会介绍和组合关系的区别），&lt;em&gt;使用一根实线表示&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;学生上学需要用到自行车，与自行车是一种&lt;strong&gt;依赖关系&lt;/strong&gt;，&lt;em&gt;使用带箭头的虚线表示&lt;/em&gt;；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技能提升" scheme="http://yoursite.com/tags/%E6%8A%80%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>消息推送</title>
    <link href="http://yoursite.com/2021/06/18/%E6%B6%88%E6%81%AF%E8%A7%92%E6%A0%87/"/>
    <id>http://yoursite.com/2021/06/18/消息角标/</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2023-03-20T10:33:42.213Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="de6fc2fc2e67b35badf9526d75d94b4099e25897edc1ed1cd27dfca66ff12468"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      私有文章, 请输入密码查看。
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="私有" scheme="http://yoursite.com/tags/%E7%A7%81%E6%9C%89/"/>
    
  </entry>
  
</feed>
