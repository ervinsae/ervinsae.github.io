<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ervin</title>
  
  <subtitle>ervinsae@gmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-18T06:01:14.107Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ervin Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git使用心得</title>
    <link href="http://yoursite.com/2018/10/18/git%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2018/10/18/git使用心得/</id>
    <published>2018-10-18T04:17:12.576Z</published>
    <updated>2018-10-18T06:01:14.107Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-具体"><a href="#1-具体" class="headerlink" title="1. 具体"></a>1. 具体</h3><p>1.使用git add .添加了所有修改文件到暂存区之后在commite到本地之前想撤销add操作可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure></p><p>将某个文件从暂存区拿出来。</p><p>2.已经commite了提交到了本地但是还没有push到远端，这时候发现有个文件不能提交到远端可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset -soft/--mix/--hard &lt;commite id&gt;</span><br></pre></td></tr></table></figure></p><p>会将本地仓库回退到commite id这个版本（可以是上一次commite的版本）。reset后的参数代表了是否保留本地代码的修改，具体可以查询网络。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有git的提交记录，包括详细commite id</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure></p><h3 id="2-git-add语法"><a href="#2-git-add语法" class="headerlink" title="2. git add语法"></a>2. git add语法</h3><table><thead><tr><th style="text-align:left">语法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">git add -A</td><td>stages All</td></tr><tr><td style="text-align:left">git add .</td><td>stages new and modified, without deleted</td></tr><tr><td style="text-align:left">git add -u</td><td>stages modified and deleted, without new</td></tr></tbody></table><h3 id="3-git-merge合并"><a href="#3-git-merge合并" class="headerlink" title="3. git merge合并"></a>3. git merge合并</h3><p>现在最简单的merge模式就是fast-farward merge了，就是从master拉出的分支develop后，master没有再做任何修改，所有的代码都在develop分支上提交，等到最后要合并develop到master上时，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 切换到Master分支</span><br><span class="line">git checkout master</span><br><span class="line"># 对Develop分支进行合并</span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure><h3 id="4-git-tag打标签"><a href="#4-git-tag打标签" class="headerlink" title="4. git tag打标签"></a>4. git tag打标签</h3><p>标签可以针对某一时间点的版本做标记，常用于版本发布。</p><p>1.列出标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在控制台打印出当前仓库的所有标签</span><br><span class="line">git tag</span><br><span class="line"># 搜索符合模式的标签</span><br><span class="line">git tag -l ‘v0.1.*’</span><br></pre></td></tr></table></figure><p>2.打标签</p><p>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建轻量标签</span><br><span class="line">git tag v0.1.2-light</span><br><span class="line"># 创建附注标签</span><br><span class="line">git tag -a v0.1.2 -m &quot;0.1.2版本&quot;</span><br><span class="line"># 针对某个提交打标签</span><br><span class="line">git tag v1.0 &lt;commite id&gt;</span><br></pre></td></tr></table></figure><p>3.切换标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v0.1.2</span><br></pre></td></tr></table></figure><p>4.删除标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除本地标签</span><br><span class="line">git tag -d v0.1.2</span><br><span class="line"># 删除远程标签</span><br><span class="line">git push origin --delete tag v1.0</span><br></pre></td></tr></table></figure><p>5.标签发布</p><p>通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将v0.1.2标签提交到git服务器</span><br><span class="line">git push origin v0.1.2</span><br><span class="line"># 将本地所有标签一次性提交到git服务器</span><br><span class="line">git push origin –tags</span><br></pre></td></tr></table></figure><h3 id="5-git-stash"><a href="#5-git-stash" class="headerlink" title="5. git stash"></a>5. git stash</h3><p>该命令用来保存当前分支上还没commite的修改，使当前分支保持clean状态（git status）</p><p><code>使用场景:</code>执行git stash后，你在dev分支没有提交的修改暂时被“藏”了起来，看起来dev分支是干净的。但是，请一定注意，你还在dev分支！因为你需要切换到master分支去修改bug，因此此时需要切换到master分支（如果不执行git stash就切换到master分支是不行的：git会报告当前dev分支还存在未提交的修改，比如先提交才允许你切换分支，而出于各种原因，你还不能现在提交dev分支的内容（一般也就先提交了，大不了再切回来改就是哦），这就是git stash存在的价值）。</p><p>切换到stash分支后的恢复命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 恢复并删除stash内容</span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"># 查看现场</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"># 保存现场</span><br><span class="line">git stash</span><br></pre></td></tr></table></figure></p><h3 id="6-git分支管理"><a href="#6-git分支管理" class="headerlink" title="6. git分支管理"></a>6. git分支管理</h3><ol><li><code>master</code>:主分支，当前分支上的代码随时可以直接发布，并且只能通过Pull Request从其他分支进行合并，而不能直接push修改。当开发告一段落，产生了新的可供发布的代码时，master分支通过Pull Request更新了代码，同时，每一次更新必须添加对应版本号的标签TAG。</li><li><code>develop</code>:开发分支，保存当前最新开发成果的分支，即当一个新功能开发完毕需要先合并到develop分支，这个分支的代码会进行每日的代码持续集成(Daily Build)。所有的开发任务都是从这个分支Checkout新的特性分支进行开发。</li><li><code>feature</code>:特性分支，当开发新的功能时，从develop分支Checkout新的feature分支，这个分支的代码最终要合并回develop分支或者废弃掉(例如预研功能效果不好时)。feature分支最好以功能为单位。</li><li><p><code>hotfix</code>:紧急修复分支，唯一从master分支派生的分支，当生产环境中发现了异常或者缺陷的时候，从master分支上指定的TAG版本Checkout hotfix分支进行紧急修复工作，当修复完成之后，必须同时合并到master分支和develop分支。合并完代码之后删除hotfix分支。</p></li><li><p>新建分支(已feature为例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 切换本地分支到develop分支</span><br><span class="line">git checkout develop</span><br><span class="line"># 拉取远程Git仓库中的最新的develop分支的代码</span><br><span class="line">git pull</span><br><span class="line"># 创建本地特性分支feature</span><br><span class="line">git checkout -b feature</span><br><span class="line"># 推送本地特性分支到远程Git仓库（即创建远程特性分支），-u为追踪远程分支</span><br><span class="line">git push -u origin feature</span><br></pre></td></tr></table></figure></li><li><p>已feature分支为例开发合并全流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 开发代码。以下两步的作用是保证你本地的feature分支的代码为最新，因为有可能你是和别人合作开发的该功能，如果你刚更新过或者你是一个人在开发则可以省略此操作</span><br><span class="line"># 切换到本地feature分支</span><br><span class="line">git checkout feature</span><br><span class="line"># 拉取远程分支代码，--rebase最好加上</span><br><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 合并代码</span><br><span class="line"># 切换到本地develop分支</span><br><span class="line">git checkout develop</span><br><span class="line"># 拉取最新的远程origin/develop分支代码，因为可能已经有人提交了代码</span><br><span class="line">git pull --rebase</span><br><span class="line"># 从本地feature-login分支合并代码，--no-ff为禁止fast-farward模式</span><br><span class="line">git merge --no-ff feature-login</span><br><span class="line"># 推送到远程分支</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 代码已经合并完，可以删除本地特性分支和远程特性分支</span><br><span class="line"># 删除本地feature-login特性分支</span><br><span class="line">git branch -d feature-login</span><br><span class="line"># 删除远程origin/feature-login特性分支（废除，实验无效）</span><br><span class="line">git branch -r -d origin/feature-login</span><br><span class="line">#在v1.7.0 之后，可以使用这种语法删除远程分支(同删除标签tag类似)</span><br><span class="line">git push origin --delete &lt;branch name&gt;</span><br></pre></td></tr></table></figure><h3 id="7-git-push"><a href="#7-git-push" class="headerlink" title="7.git push"></a>7.git push</h3><p>push到远程分支有https和ssh两种方式，https每次push都会要求输入用户名和密码，而ssh只要在远端注册了ssh key则不需要。<br>另外，ssh可以上传大文件，https貌似不行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这个会把本地当前分支的内容push到远端的demo分支，如果远端没有该分支则自动创建</span><br><span class="line">git push -u origin demo</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 生成ssh key,该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：</span><br><span class="line">ssh-keygen</span><br><span class="line"># 可以查看远程分支情况</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="8-git-reset"><a href="#8-git-reset" class="headerlink" title="8.git reset"></a>8.git reset</h3><p>第一小节有类似操作。</p><ol><li>本地代码回滚</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 回滚到commit-id，讲commit-id之后提交的commit都去除</span><br><span class="line">git reset --hard commit-id</span><br><span class="line"># 将最近3次的提交回滚</span><br><span class="line">git reset --hard HEAD~3</span><br></pre></td></tr></table></figure><ol start="2"><li>远程代码回滚。应用场景：app已经发布了，发现有问题需要回滚到某个commit，再重新发布。这时需要先将本地分支退回到某个commit，删除远程分支，再重新push本地分支。操作步骤（还没检验）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line">git checkout the_branch</span><br><span class="line"># 2</span><br><span class="line">git pull</span><br><span class="line"># 3 备份一下这个分支当前的情况(本地新建分支？)</span><br><span class="line">git branch the_branch_backup</span><br><span class="line"># 4 把the_branch本地回滚到the_commit_id</span><br><span class="line">git reset --hard the_commit_id</span><br><span class="line"># 5 删除远程 the_branch（可以删除远程分支）</span><br><span class="line">git push origin :the_branch</span><br><span class="line"># 6 用回滚后的本地分支重新建立远程分支</span><br><span class="line">git push origin the_branch</span><br><span class="line"># 7 如果前面都成功了，删除这个备份分支</span><br><span class="line">git push origin :the_branch_backup</span><br></pre></td></tr></table></figure><h3 id="9-git-remote"><a href="#9-git-remote" class="headerlink" title="9.git remote"></a>9.git remote</h3><p>多源操作，一般是一个源，但是多源也很有用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 如果想关联另一个远端仓库（加一个源）</span><br><span class="line">git remote add &lt;origin name&gt; git@gitlab.com:demo/demo.git</span><br><span class="line"></span><br><span class="line"># 显示全部源</span><br><span class="line">git remote / git remote -v</span><br><span class="line"></span><br><span class="line"># rename</span><br><span class="line">git remote rename &lt;origin name&gt; &lt;origin new name&gt;</span><br><span class="line"></span><br><span class="line"># deleted</span><br><span class="line">git remote rm &lt;origin name&gt;</span><br><span class="line"></span><br><span class="line"># 查看指定源的全部信息</span><br><span class="line">git remote show &lt;origin name&gt;</span><br><span class="line"></span><br><span class="line"># 修改远程仓库地址</span><br><span class="line">git remote set-url origin &lt;origin url&gt;</span><br></pre></td></tr></table></figure></p><h3 id="10-git-commit"><a href="#10-git-commit" class="headerlink" title="10.git commit"></a>10.git commit</h3><p>合并某个分支上的某个commit或者多个commit到master分支上<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd2e86 - <span class="number">946992</span> -<span class="number">9143</span>a9 - a6fd86 - <span class="number">5</span>a6057 [master]</span><br><span class="line">           \</span><br><span class="line">            <span class="number">76</span>cada - <span class="number">62</span>ecb3 - b886a0 [feature]</span><br></pre></td></tr></table></figure></p><ol><li>比如，feature 分支上的commit 62ecb3 非常重要，它含有一个bug的修改，或其他人想访问的内容。无论什么原因，你现在只需要将62ecb3 合并到master，而不合并feature上的其他commits，所以我们用git cherry-pick命令来做：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 示例</span><br><span class="line">git checkout master</span><br><span class="line">git cherry-pick 62ecb3</span><br></pre></td></tr></table></figure><ol start="2"><li>在一些特性情况下，合并单个commit并不够，你需要合并一系列相连的commits。这种情况下就不要选择cherry-pick了，rebase 更适合。还以上例为例，假设你需要合并feature分支的commit76cada ~62ecb3 到master分支。(未实验，要实验一下)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 首先需要基于feature创建一个新的分支，并指明新分支的最后一个commit：</span><br><span class="line">git checkout -bnewbranch 62ecb3</span><br><span class="line"># 然后，rebase这个新分支的commit到master（--ontomaster）。76cada^ 指明你想从哪个特定的commit开始。</span><br><span class="line">git rebase --ontomaster 76cada^</span><br></pre></td></tr></table></figure><h3 id="11-git-rebase"><a href="#11-git-rebase" class="headerlink" title="11.git rebase"></a>11.git rebase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 12.git detached HEAD</span><br><span class="line">在一些情况下，会出现detached HEAD的情况，（后面分析下原因）。detached head即游离的HEAD，HEAD指向了未知的分支，即不在所有已知的分支范围内。</span><br><span class="line"></span><br><span class="line">解决办法：</span><br><span class="line"></span><br><span class="line">```git</span><br><span class="line">$ git branch</span><br><span class="line">* (HEAD detached at origin/master)</span><br><span class="line">  dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>  HEAD指向了一个未知的分支，可用git checkout -b基于当前分支创建一个新的临时分支保留代码，合并到合适的分支后删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b temp</span><br><span class="line">Switched to a new branch &apos;temp&apos;</span><br><span class="line">$ git branch</span><br><span class="line">  dev</span><br><span class="line">  master</span><br><span class="line">* temp</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">Your branch is up-to-date with &apos;origin/master&apos;.</span><br><span class="line">$ git merge temp</span><br><span class="line">Already up-to-date.</span><br><span class="line">$ git branch -d temp</span><br><span class="line">Deleted branch temp (was 3e74a7a).</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-具体&quot;&gt;&lt;a href=&quot;#1-具体&quot; class=&quot;headerlink&quot; title=&quot;1. 具体&quot;&gt;&lt;/a&gt;1. 具体&lt;/h3&gt;&lt;p&gt;1.使用git add .添加了所有修改文件到暂存区之后在commite到本地之前想撤销add操作可以使用&lt;br&gt;&lt;fi
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/18/hello-world/"/>
    <id>http://yoursite.com/2018/10/18/hello-world/</id>
    <published>2018-10-18T02:10:52.296Z</published>
    <updated>2018-10-18T06:00:45.420Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
</feed>
